// Top-level build file where you can add configuration options common to all sub-projects/modules.

def androidProjectPath = project.rootDir.absolutePath + "/android"
def iosProjectPath = project.rootDir.absolutePath + "/ios"
def localizationPath = project.rootDir.absolutePath + "/localization"
// read android module names from file system
def androidModules = []
file(androidProjectPath).listFiles().grep { it.isDirectory() }.each { androidModules.add(it.name) }
println("Projekt contains the android modules " + androidModules)

buildscript {
  // gradle plugins
  ext.kotlin_version = "1.3.61"

  // android build property extensions
  ext.androidCompileSdkVersion = 29
  ext.androidBuildToolsVersion = "29.0.2"
  ext.androidApplicationId = "de.appcom.kmpplayground"
  ext.androidMinSdkVersion = 22
  ext.androidTargetSdkVersion = 29
  ext.androidVersionCode = 1
  ext.androidVersionName = "1.0"

  // dependencies
  ext.versions = [
      "supportlib": "1.1.0",
      "constraintlayout": "1.1.3",
      "material": "1.2.0-alpha05",
      "corektx": "1.2.0",
      "timber": "4.7.1",
      "navigation": "2.2.1",
      "dagger": "2.26",
      "junit": "4.12",
      "runner": "1.2.0",
      "espresso_core": "3.2.0",
      "glide": "4.11.0",
      "lifecycle": "2.2.0",
      "kotlinx_coroutines_core":"1.3.2"
  ]
  ext.deps = [
      "appcompat": "androidx.appcompat:appcompat:${versions.supportlib}",
      "constraintlayout": "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}",
      "core_ktx": "androidx.core:core-ktx:${versions.corektx}",
      "dagger": "com.google.dagger:dagger:${versions.dagger}",
      "dagger_compiler": "com.google.dagger:dagger-compiler:${versions.dagger}",
      "dagger_android": "com.google.dagger:dagger-android:${versions.dagger}",
      "dagger_android_processor": "com.google.dagger:dagger-android-processor:${versions.dagger}",
      "dagger_android_support": "com.google.dagger:dagger-android-support:${versions.dagger}",
      "glide": "com.github.bumptech.glide:glide:${versions.glide}",
      "glide_compiler": "com.github.bumptech.glide:compiler:${versions.glide}",
      "kotlinx_coroutines_core":"org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinx_coroutines_core}",
      "lifecycle_runtime_ktx": "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle}",
      "material": "com.google.android.material:material:${versions.material}",
      "navigation_fragment_ktx": "androidx.navigation:navigation-fragment-ktx:${versions.navigation}",
      "navigation_ui_ktx": "androidx.navigation:navigation-ui-ktx:${versions.navigation}",
      "timber": "com.jakewharton.timber:timber:${versions.timber}"
  ]
  // kmp
  ext.multiplatformSettings_version = "0.5"
  ext.ktor_version = "1.3.1"
  ext.sqldelight_version = "1.2.1"
  ext.coroutines_version = "1.3.2"

  ext.kmpDeps = [
      "multiplatform_settings": "com.russhwolf:multiplatform-settings:${multiplatformSettings_version}"
  ]

  // test
  ext.testDeps = [
      "junit": "junit:junit:${versions.junit}",
      "runner": "androidx.test:runner:${versions.runner}",
      "espresso_core": "androidx.test.espresso:espresso-core:${versions.espresso_core}",
  ]

  repositories {
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.6.1'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    classpath "com.squareup.sqldelight:gradle-plugin:$sqldelight_version"
    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}

allprojects {
  repositories {
    google()
    jcenter()
  }
}

subprojects {
  afterEvaluate {
    def isAndroidModule = androidModules.contains(name) && it.hasProperty('android')
    def isAppModule = name == 'app'

    if (isAndroidModule && isAppModule) {
      android {
        defaultConfig {
          applicationId rootProject.androidApplicationId
        }
      }
    }

    if (isAndroidModule) {
      android {
        compileSdkVersion rootProject.androidCompileSdkVersion
        buildToolsVersion rootProject.androidBuildToolsVersion
        defaultConfig {
          minSdkVersion rootProject.androidMinSdkVersion
          targetSdkVersion rootProject.androidTargetSdkVersion
          versionCode rootProject.androidVersionCode
          versionName rootProject.androidVersionName
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
        buildTypes {
          release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                'proguard-rules.pro'
          }
        }
        sourceSets {
          main.java.srcDirs += 'src/main/kotlin'
        }
        compileOptions {
          sourceCompatibility = 1.8
          targetCompatibility = 1.8
        }
        // Kotlin code source compatibility to Java 1.8
        kotlinOptions {
          jvmTarget = "1.8"
        }
        viewBinding {
          enabled = true
        }
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

// Generates strings with twine for the project
task generateProjectStrings {
  def totalScript = ""
  def source = localizationPath + "/localization.txt"

  // Strings for android are added to the specific submodule, according to the given tag
  androidModules.each { moduleName ->
    def destinationAndroid = androidProjectPath + "/" + moduleName + "/src/main/res"
    totalScript += "twine generate-all-localization-files " + source +
        " " +
        destinationAndroid +
        " --tags " +
        moduleName +
        " --validate --format android; "
  }

  // ios Strings are added to an resource folder
  def destinationIos = iosProjectPath + "/Playground/Resources"
  totalScript += "twine generate-all-localization-files " + source +
      " " +
      destinationIos +
      " --validate --format apple; "

  def script = 'if hash twine 2>/dev/null; then ' + totalScript + ' fi'
  doLast {
    // print(script)
    exec {
      executable "sh"
      args '-c', script
    }
  }
}