// Top-level build file where you can add configuration options common to all sub-projects/modules.

def androidProjectPath = project.rootDir.absolutePath + "/android"
def iosProjectPath = project.rootDir.absolutePath + "/ios"
def localizationPath = project.rootDir.absolutePath + "/localization"
// read android module names from file system
def androidModules = []
file(androidProjectPath).listFiles().grep { it.isDirectory() }.each { androidModules.add(it.name) }
println("Projekt contains the android modules " + androidModules)


buildscript {
    // common build property extensions
    ext.kotlin_version = '1.3.50'

    // android build property extensions
    ext.androidCompileSdkVersion = 29
    ext.androidBuildToolsVersion = "29.0.2"
    ext.androidApplicationId = "de.appcom.kmpplayground"
    ext.androidMinSdkVersion = 22
    ext.androidTargetSdkVersion = 29
    ext.androidVersionCode = 1
    ext.androidVersionName = "1.0"

    // ios build property extensions
    // -

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }


}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Generates strings from twine for the project
task generateProjectStrings {
    def totalScript = ""
    def source = localizationPath + "/localization.txt"
    // android
    // Strings for android are added to the specific submodule, according to the given tag
    androidModules.each { moduleName ->
        def destinationAndroid = androidProjectPath + "/" + moduleName + "/src/main/res"
        totalScript += "twine generate-all-localization-files " + source +
                " " +
                destinationAndroid +
                "--tags" +
                moduleName +
                " --validate --format android; "
    }

    // ios
    // ios Strings are added to an resource folder
    def destinationIos = iosProjectPath + "/Playground/Resources"
    totalScript += "twine generate-all-localization-files " + source +
            " " +
            destinationIos +
            " --validate --format apple; "

    def script = 'if hash twine 2>/dev/null; then ' + totalScript + ' fi'
    doLast {
        print(script)
        exec {
            executable "sh"
            args '-c', script
        }
    }
}

task generateMetrics() {
    // TODO generate metrics for each module and save it to a file
}

task addUseCaseModule() {
    // TODO generate folders and modules for ios, android and shared
}
