// Top-level build file where you can add configuration options common to all sub-projects/modules.

def androidProjectPath = project.rootDir.absolutePath + "/android"
def iosProjectPath = project.rootDir.absolutePath + "/ios"
def localizationPath = project.rootDir.absolutePath + "/localization"
//def androidModules = ['app', 'nasa', 'pixelsort', 'settings']
def androidModules = []
// read android module names from file system
file(androidProjectPath).listFiles().each{file -> if(file.isDirectory()) androidModules.add(file.name)}
println("Projekt contains the android modules "+androidModules)


buildscript {
  ext.kotlin_version = '1.3.50'
  repositories {
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.1'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }


}

allprojects {
  repositories {
    google()
    jcenter()
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

// Generates strings from twine for the project
task generateProjectStrings {
  def totalScript = ""
  def source = localizationPath + "/localization.txt"
  // android
  // Strings for android are added to the specific submodule, according to the given tag
  androidModules.each { moduleName ->
    def destinationAndroid = androidProjectPath + "/" + moduleName + "/src/main/res"
    totalScript += "twine generate-all-localization-files " + source +
        " " +
        destinationAndroid +
        "--tags" +
        moduleName +
        " --validate --format android; "
  }

  // ios
  // ios Strings are added to an Ressource folder
  def destinationIos = iosProjectPath + "/Playground/Resources"
  totalScript += "twine generate-all-localization-files " + source +
      " " +
      destinationIos +
      " --validate --format apple; "

  def script = 'if hash twine 2>/dev/null; then ' + totalScript + ' fi'
  doLast {
    print(script)
    exec {
      executable "sh"
      args '-c', script
    }
  }
}

task generateMetrics() {
  // TODO generate metrics for each module and save it to a file
}
